rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isCurrentUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      let userId = request.auth.uid;
      // Add exists() check to prevent errors if user document doesn't exist
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return isAuthenticated() 
        && exists(/databases/$(database)/documents/users/$(userId))
        && userDoc.data.isAdmin == true;
    }

    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isValidTimestamps(timestamps) {
      return timestamps.createdAt is timestamp 
        && timestamps.updatedAt is timestamp;
    }

    function isValidString(field) {
      return field is string && field.size() <= 1000;
    }

    function isValidImage(image) {
      return image.publicUrl is string 
        && image.path is string 
        && image.altText is string
        && isValidTimestamps(image.timestamps)
    }

    function isValidPrice(price) {
      return price.type in ['flat'] 
        && price.amount is number 
        && price.amount >= 0;
    }

    match /users/{userId} {
      allow read: if isCurrentUser(userId) || isAdmin();
      allow create, update: if isCurrentUser(userId);
      allow delete: if isCurrentUser(userId) || isAdmin();
    }

    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null && !exists(/databases/$(database)/documents/usernames/$(username));
      allow delete: if userDoc().data.username == username;
      allow update: if false;
    }

    match /events/{eventId} {
      allow read: if true;

      allow create, update: if isAdmin()
        && isValidTimestamps(request.resource.data.timestamps)
        && isValidString(request.resource.data.title.display)
        && isValidString(request.resource.data.title.lowercase)
        && isValidString(request.resource.data.caption)
        && request.resource.data.date is timestamp
        && isValidImage(request.resource.data.image)
        && isValidPrice(request.resource.data.price)
        && request.resource.data.genres is list
        && request.resource.data.lineup is list
        && request.resource.data.deletedAt == null;

      allow delete: if isAdmin();
    }

    match /play/{playId} {
      allow read: if isAdmin(); 
      allow write: if isAuthenticated();
      allow delete: if isAdmin(); 
    }

    match /residents/{residentId} {
      allow read: if true; 
      allow write: if isAdmin();
      allow delete: if isAdmin(); 
    }
  }
}