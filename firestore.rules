rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isCurrentUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      let userId = request.auth.uid;
      // Add exists() check to prevent errors if user document doesn't exist
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return isAuthenticated() 
        && exists(/databases/$(database)/documents/users/$(userId))
        && userDoc.data.isAdmin == true;
    }

    function userDoc() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    function isValidMetadata(data) {
      return data.keys().hasAll(['createdAt', 'updatedAt']) 
        && data.createdAt is timestamp 
        && data.updatedAt is timestamp;
    }

    function isValidString(field) {
      return field is string && field.size() <= 1000;
    }

    match /users/{userId} {
      allow read: if isCurrentUser(userId) || isAdmin();
      allow create, update: if isCurrentUser(userId) && request.resource.data.settings.agreeTos==true;
      allow delete: if isCurrentUser(userId) || isAdmin();
    }

    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null && !exists(/databases/$(database)/documents/usernames/$(username));
      allow delete: if userDoc().data.username == username;
      allow update: if false;
    }

    match /events/{eventId} {
      allow read: if true;

      allow create, update: if isAdmin()
        && isValidMetadata(request.resource.data)
        && isValidString(request.resource.data.title)
        && isValidString(request.resource.data.caption)
        && request.resource.data.date is timestamp;

      allow delete: if isAdmin();
    }

    match /play/{playId} {
      allow read: if isAdmin(); 
      allow write: if isAuthenticated();
      allow delete: if isAdmin(); 
    }
  }
}