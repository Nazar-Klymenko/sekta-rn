rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      let userId = request.auth.uid;
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      return isAuthenticated() && userDoc != null && userDoc.data.isAdmin == true;
    }
    
    function isValidData(data) {
      return data.keys().hasAll(['createdAt', 'updatedAt']) 
             && data.createdAt is timestamp 
             && data.updatedAt is timestamp;
    }

    function isValidString(field) {
      return field is string && field.size() <= 1000;
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      
      allow create: if isAuthenticated() 
        && request.auth.uid == userId
        && request.resource.data.keys().hasAll(['email', 'createdAt', 'updatedAt'])
        && request.resource.data.email == request.auth.token.email
        && !request.resource.data.keys().hasAny(['isAdmin']); // Prevent setting admin status

      allow update: if isOwner(userId)
        && isValidData(request.resource.data)
        && request.resource.data.email == request.auth.token.email
        && isValidString(request.resource.data.username)
        && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['isAdmin']) 
            || isAdmin());

      allow delete: if isOwner(userId) || isAdmin();
    }
    match /usernames/{username} {
      allow read: if true; 
      allow create: if isAuthenticated() 
        && request.resource.data.uid == request.auth.uid
        && isValidData(request.resource.data);
       allow update, delete: if isOwner(resource.data.uid) || isAdmin();
    }
     
    match /events/{eventId} {
      allow read: if true;
      
      allow create, update: if isAdmin()
        && isValidData(request.resource.data)
        && isValidString(request.resource.data.title)
        && isValidString(request.resource.data.caption)
        && request.resource.data.price is number
        && request.resource.data.date is timestamp;

      allow delete: if isAdmin();
    }

    match /play/{playId} {
      allow read: if isAdmin(); 
      allow write: if isAuthenticated();
      allow delete: if isAdmin(); 
    }
  }
}